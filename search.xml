<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mysql-事务的隔离级别</title>
    <url>/2024/09/17/Mysql-%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<p>Mysql之事物的隔离级别</p>
<span id="more"></span>

<p>基本上就是看小林coding，然后自己了总结一下（我只是知识的搬运工</p>
<h2 id="1-事物的四个特性"><a href="#1-事物的四个特性" class="headerlink" title="1.事物的四个特性"></a>1.事物的四个特性</h2><p>首先就是最经典的，事务的ACID四个属性，分别是：</p>
<ul>
<li><p><strong>原子性（Atomicity）</strong>：事务的所有操作，要么全部完成，要么全部未完成，也就是执行失败了要回滚，不存在一个中间态，通过<code>undolog</code>来实现</p>
</li>
<li><p><strong>一致性（Consistency）</strong>：指的是事务需要保证数据库从一个一致性的状态，转变到另一个一致性的状态，所有的更改需要符合预定义的各种约束</p>
</li>
<li><p><strong>隔离性（Isolation）</strong>：多个事务并行执行的时候不会互相干扰，通过<code>MVCC</code>来实现</p>
</li>
<li><p><strong>持久性（Durability）</strong>：事务对数据的修改是永久的，通过<code>redolog</code>来实现</p>
</li>
</ul>
<p><strong>一致性</strong>是通过<strong>原子性</strong>+<strong>持久性</strong>+<strong>隔离性</strong>来保证的</p>
<h2 id="2-事务的四种隔离级别"><a href="#2-事务的四种隔离级别" class="headerlink" title="2.事务的四种隔离级别"></a>2.事务的四种隔离级别</h2><p>在执行事务的时候，会出现四种问题，分别是</p>
<ul>
<li><p>脏读：读到了别的事务修改了，但是还没提交的数据</p>
</li>
<li><p>不可重复读：在一个事务的生命周期内，读取同一个数据，读到的结果却不一样</p>
</li>
<li><p>幻读：查询符合某个条件的<strong>行数</strong>，结果每次查到的<strong>行数</strong>都不一样</p>
</li>
</ul>
<p>针对上面提到的三种问题，就引申出了事物的<strong>四种隔离级别</strong>：</p>
<ul>
<li>读未提交：顾名思义，会导致脏读的现象出现</li>
<li>读已提交：为了解决脏读，只能读到别的事物已经提交之后的结果</li>
<li>可重复读：针对不可重复读这一问题，在此隔离级别下，一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，是<code>InnoDB</code>引擎的默认隔离级别</li>
<li>串行化：最高的隔离级别，对记录加锁，访问同一个数据时，前一个事务执行完，后面事务才能执行</li>
</ul>
<p>下面具体介绍一下这四种隔离级别的实现方式</p>
<h3 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h3><p>很简单，直接读取最新的数据即可</p>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>在介绍读已提交和可重复读之前，首先需要了解什么是<code>Read View</code>，以及如何通过<code>MVCC</code>来实现事务的隔离</p>
<p>首先，<code>Read View</code>就是在事务执行之前，对数据拍一张快照，后续的执行都是建立在拍的这张快照之上，<strong>读已提交</strong>在执行每一条指令之前，都会拍一张新的快照，而<strong>可重复读</strong>则是在整个事务的执行期间内，用的都是同一张快照</p>
<p><code>Read View</code>包含四个字段，分别是</p>
<ul>
<li><code>m_ids</code> ：创建快照时，所有未提交的事务id</li>
<li><code>min_trx_id</code> ：所有活跃事务的最小id</li>
<li><code>max_trx_id</code> ：所有活跃事务的最大id+1，也就是给下一个事务的id</li>
<li><code>creator_trx_id</code> ：创建此快照的事务id</li>
</ul>
<p>此外，在聚簇索引的每一条行记录当中，包含两个隐藏列，分别是<code>trx_id</code>和<code>roll_pointer</code>，代表当前记录最近一次修改是被哪一个事务所修改，以及当前记录的被修改历史（<code>undolog</code>版本链）</p>
<p>一个事务在访问记录的时候，首先会根据自己的<code>Read View</code>，查看对应的隐藏列，看这条记录最近一次是被哪个事务id所修改，如果这个事务id</p>
<ol>
<li>小于<code>min_trx_id</code>，说明它在创建此快照之前已经被修改提交了，是可见的</li>
<li>大于等于<code>max_trx_id</code>，说明它是在创建此快照之后，才被一个新的事务修改提交的，对于当前事务而言是不可见的，需要通过版本链找到一个旧版本的且可见的</li>
<li>如果id介于上述二者之间，需要通过<code>m_ids</code>做一个具体的判断，看它是否可见，不可见的话就需要通过版本链去寻找了</li>
</ol>
<h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>在每次事务的执行伊始，创建一个快照，执行的过程当中就按照上面的<code>MVCC</code>所说的规则，去找寻最近的一次可见的记录。如果此事务修改了这条记录，则会在版本链上面加上一条最新的记录，id是此事务的id</p>
<h3 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h3><p>读取每个数据时，都生成一个新的<code>Read View</code>，因为在执行每次操作之前都需要知道当前数据库最新的状况，因此不能只基于开始执行的时候拍的那张照片，而是执行每条语句都要拍一张最新的</p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>最后说一下幻读这一现象，在<strong>可重复读</strong>这一隔离级别下，既然每次读到的数据都是一样的，那为什么会出现幻读呢？</p>
<p>针对<strong>快照读</strong>，也就是普通的select语句，由于<code>MVCC</code>的加持，绝大部分情况下是不存在幻读现象的，我们看不到别的事务插入的数据，但是存在一种特殊情况，就是事务A生成了一个快照，之后事务B新插入了一条数据，按理说A是看不到这条数据的，但是A不小心更新了一下这条数据，此时这条数据的隐藏列当中的<code>trx_id</code>就是事务A的id，因为它最近一次更新是事务A执行的，所以后续事务A在使用普通的select语句的时候，就可以看到这条数据了，两次select查到的条数不一样，发生了幻读</p>
<p>针对<strong>当前读</strong>，也就是<code>select xxx for update</code>，会读取最新的数据，那么别的事务在事务A执行期间提交的修改，就会被A所看到，也就会出现幻读现象</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>八股</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode刷题</title>
    <url>/2024/09/07/Leetcode/</url>
    <content><![CDATA[<p>记录自己刷的一些经典的算法题</p>
<span id="more"></span>

<h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a class="link"   href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" >3. 无重复字符的最长子串<i class="fas fa-external-link-alt"></i></a></h2><p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>

<p><strong>解答：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> (res <span class="type">int</span>) &#123;</span><br><span class="line">    cnt := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>&#123;&#125;</span><br><span class="line">    right := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">delete</span>(cnt, s[i<span class="number">-1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> right+<span class="number">1</span>&lt;<span class="built_in">len</span>(s) &amp;&amp; !cnt[s[right+<span class="number">1</span>]] &#123;</span><br><span class="line">            right++</span><br><span class="line">            cnt[s[right]] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = max(res, right-i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>思路</strong>：</p>
<p>这题真的是我写过最典的一道滑动窗口了，常做常新，每次刚做完，然后第二天就忘了</p>
<img    
                       lazyload
                       alt="image"
                       data-src="https://ycy01215.oss-cn-nanjing.aliyuncs.com/typora/8b635771d5779d17c201d349744e88eb.png"
                         alt="8b635771d5779d17c201d349744e88eb" style="zoom: 50%;" 
                 >

<p>思路就是滑动窗口，用一个map记录当前已经存在的字母，right每次一直往右滑动，直至right+1是重复的，停止滑动；然后删除最左边的元素，继续滑动，如果删除的正好是right+1对应的字母，就可以继续滑了，不是的话就继续删。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/16/Redis/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
